CC	 := g++

CXXFLAGS := $(CFLAGS)
LDFLAGS	 := $(LIBPATH)

HEADERS	 := $(wildcard *.h) 

CRYPTO_OBJS := OPE.o util.o HGD.o CryptoManager.o Equation.o
CRYPTDB_OBJS :=  $(CRYPTO_OBJS) AccessManager.o EDBClient.o Connect.o Translator.o MultiPrinc.o
PROXY_OBJS := ConnectWrapper.o $(CRYPTDB_OBJS) 


export SSLPATH GMPPATH MYPATH LUAPATH LDFLAGS

all: test edbcrypto execute cryptdb

# UDF libraries
edbcrypto: edb.so

libedbcrypto.so: libedbcrypto.so.1
	ln -sf $< $@	

libedbcrypto.so.1: libedbcrypto.so.1.0.1
	ln -sf $< $@

libedbcrypto.so.1.0.1: $(CRYPTO_OBJS)
	   $(CC) $(LDFLAGS) -shared -o $@ $^ -lntl -lcrypto

edb.so: edb.o libedbcrypto.so
	$(CC)   $(LDFLAGS) $(LIBFLAGS)  -o $@ $^  -ldl $(lLIB)

test: cryptdb
	cd tests && $(MAKE)
#test: libedbcrypto.so Translator.o Connect.o EDBClient.o AccessManager.o test.o
#	$(CC) $(LDFLAGS) -o $@ $^ -ledbcrypto -ldl -lcrypto $(ILIB)	

execute: libexecute.so
cryptdb: libcryptdb.so

libcryptdb.so: $(CRYPTDB_OBJS) 
	$(CC) $(LDFLAGS) $(LIBFLAGS)  -o $@ $^ -lntl -ldl -lcrypto $(lLIB)

libexecute.so: $(PROXY_OBJS) 
	$(CC) $(LDFLAGS) $(LIBFLAGS)  -o $@ $^ -lntl -ldl -lcrypto $(lLIB)

%.o: %.cc %.cpp $(HEADERS)
	$(CC) $(CXXFLAGS) $< -c -o $@
	
install: libedbcrypto.so installudf
	cp $< /usr/lib/

clean: 
	rm -f *.o libedbcrypto.so* edb.so*  libexecute.so libcryptdb.so 
	cd tests && $(MAKE) clean


