Delivered-To: nickolai.zeldovich@gmail.com
Received: by 10.68.41.135 with SMTP id f7cs610998pbl;
        Sat, 9 Jul 2011 10:40:25 -0700 (PDT)
Received: by 10.42.246.134 with SMTP id ly6mr3332695icb.136.1310233224436;
        Sat, 09 Jul 2011 10:40:24 -0700 (PDT)
Return-Path: <harris@summereyes.com>
Received: from megatron.csail.mit.edu (megatron.csail.mit.edu [128.30.2.16])
        by mx.google.com with ESMTPS id w6si10544160ics.59.2011.07.09.10.40.22
        (version=TLSv1/SSLv3 cipher=OTHER);
        Sat, 09 Jul 2011 10:40:23 -0700 (PDT)
Received-SPF: neutral (google.com: 128.30.2.16 is neither permitted nor denied by best guess record for domain of harris@summereyes.com) client-ip=128.30.2.16;
Authentication-Results: mx.google.com; spf=neutral (google.com: 128.30.2.16 is neither permitted nor denied by best guess record for domain of harris@summereyes.com) smtp.mail=harris@summereyes.com
Message-Id: <4e189287.c6822a0a.09f2.ffffa353SMTPIN_ADDED@mx.google.com>
Received: from p3plsmtpa01-04.prod.phx3.secureserver.net ([72.167.82.84])
  by megatron.csail.mit.edu with smtp (Exim 4.69)
  (envelope-from <harris@SummerEyes.com>)
  id 1QfbVs-0003ra-OA
  for nickolai@csail.mit.edu; Sat, 09 Jul 2011 13:40:22 -0400
Received: (qmail 1849 invoked from network); 9 Jul 2011 17:40:17 -0000
Received: from unknown (96.237.178.117)
  by p3plsmtpa01-04.prod.phx3.secureserver.net (72.167.82.84) with ESMTP; 09 Jul 2011 17:40:16 -0000
From: "Craig Harris" <harris@SummerEyes.com>
To: "'Raluca Ada Popa'" <ralucap@MIT.EDU>,
  "'Nickolai Zeldovich'" <nickolai@csail.mit.edu>
Subject: Comments on CryptDB build/installation
Date: Sat, 9 Jul 2011 13:39:50 -0400
MIME-Version: 1.0
Content-Type: text/plain;
  charset="us-ascii"
Content-Transfer-Encoding: 7bit
X-Mailer: Microsoft Office Outlook, Build 11.0.5510
In-Reply-To: <FB934A7F-3025-493D-8156-D6838EE128BB@MIT.EDU>
Thread-Index: Acw8CrMocNSaBwXFRuSXsrxtlD/6cQCONjMQ
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1506

I've been downloading/building cryptdb over several days.
Most steps have gone smoothly.  Overall, better than I expected.

1. LUA issue:  The EDB/configs/mysql file contains:

  -I$(LUAPATH)/include/lua5.1/

Downloading a fresh copy of LUA and doing a "make local" failed to produce a
lua5.1 subdirectory ... so I'm guessing we upgraded lua from a previous
version, and created the lua5.1 directory by hand. Anyway, ExecuteWrapper.o
failed to make, looking for lua.hpp.  

I'm not sure of the best way to address this kind of thing.  I suspect most
initial cryptdb users won't have an old installation of LUA, so that a

  -I$(LUAPATH)/include

directive will work most of the time.  For now, I changed the generated
Makefile to include the above to get past the compilation issue, but it
might be better to change the config/mysql file to do something like:

  LUA_VERSION := 
  INCPATH := ... -I$(LUAPATH)/include/$(LUA_VERSION)



2. MySQL issue: my machine already had the mysql 5.1 binaries, but not the
sources.  In particular, it was missing mysql.h and mysql_config and
mysqlclient.so - used in the EDB make process.  I downloaded the source code
for mysql 5.1 ... BUT my machine is using the pre-existing mysql to serve
several web sites.  I didn't want to blow those away with a new
installation.  So I configured the mysql build with a --prefix parameter.

But the mysql installation directory layout changes with a --prefix and
maybe with ANY source build.

In particular, the include files are in <prefix>/include/mysql, and the lib
files are in <prefix>/lib/mysql.  

The EDB configuration/Makefile expect $(MYPATH)/include and $(MYPATH)/lib,
which aren't compatible with the above.  The EDB assumptions DO WORK with a
default installation of mysql.  

I suspect the best thing is to have:

  MY_INC := $(MYPATH)/include
  MY_LIB := $(MYPATH)/lib

For now, I've hacked past it.

I'm not sure whether this will be an issue for the thousands of eager
cryptdb downloaders to come.  On the one hand, most cryptdb experimenters
won't be running websites on their development machines.  BUT OTOH, don't
current versions of Ubuntu come with MySQL installed?  It's so popular that
people may be using it for all sorts of things




3. It's probably best to avoid compilation warnings.  A clean build gives a
better first impression:

  EDB/Equation.c  complains about a "/*" within a comment.  
    Changing line 11 to have spaces between the operators
  EDB/AccessManager.c  has "int KeyAccess::SelectCount" but returns
NULL
    The callers of this function check for >0 or >Threshhold, 
    So if NULL is zero, this OK.  But maybe just return 0?




4. Compiling EDB/Connect.cpp hit an error in Connect::last_insert_id():
  Call of overloaded 'marshalVal(my_ulonglong) is ambiguous
  Candidates are  std::string marshalVal(uint64_t)
	std:string marshallVal(unsigned int)

I'm running on a 64-bit machine.  My stdint.h file has:
  typedef unsigned long int uint64_t;
and my mysql.h file has:
  typedef unsigned long long my_ulonglong;

Editting mysql.h to match stdint.h solved the compilation problem.  But that
didn't seem right, so I added a cast in Connect.cpp

I'm wondering how this worked for you.  Are running on a 32-bit machine?
Maybe we're running different minor versions of mysql-5.1?  I'm -5.1.58.




5. From reading the configure script, it looks like the name of the config
script is expected to match the machine's hostname?  The ./configure script
echoes "machine ... <configure-script-name>".  But I don't see any
particular use of the machine name except as a configuration-file name.  The
default configuration file name is qubit.  For a wider audience downloading
cryptdb, I'd suggest something like cryptdb_conf as the default name, and
not assuming that the configuration file name is the same as the machine
name.  If we ARE doing something with the name of the target machine, it's
probably better to have that as a different configuration parameter.




6. I'm still not sure how to set GMPPATH --- but it may no longer be
required.  I set it to nothing, and the EDB build completed.



7. I'm not sure about the configuration packaging in mysql.  Seems like
there should be a version of this file for postgres and any other DBMS we
want a proxy for.  If so, isn't it better to limit the contents to just the
DBMS specific aspects?



I'll try running the tests/examples later this weekend.



-----Original Message-----
From: Raluca Ada Popa [mailto:ralucap@MIT.EDU] 
Sent: Wednesday, July 06, 2011 2:30 PM
To: Craig Harris
Subject: Re: [CryptDB] CryptDB and SQL

Craig,

You actually need NTL that may include GMP. 
apt-get install libntl-dev
I use it for some crypto protocols.

Also, you will need openssl. 

If you run the proxy as well (which you do not need for the shell), you will
need mysql-proxy. The last section of the current README says how to
configure the proxy.

Please update your repo before starting. We've been committing changes and I
think Nickolai was mirroring them to the git. We'll move to git as soon as
we are done with the current tasks and committed them.

Thanks,
Raluca



On Jul 6, 2011, at 12:28 PM, Craig Harris wrote:

> Thanks Raluca!  I downloaded the software, and will follow your
instructions
> after work this evening.
> 
> I noticed that your EDB/config/qubit file specified a GMPPATH.  Is that
for
> the GNU GMP for arbitrary precision arithmetic?  Or something else I
should
> download?
> 
> -----Original Message-----
> From: Raluca Ada Popa [mailto:ralucap@MIT.EDU] 
> Sent: Tuesday, July 05, 2011 9:23 PM
> To: Craig Harris
> Subject: Re: [CryptDB] CryptDB and SQL
> 
> Hi Craig,
> 
> We are running it against MySQL 5.1 currently. Honestly, I think it should
> work on newer versions, but I did not test it so I don't know. 
> 
> Unfortunately, I did not document recently how to run the code  -- I did
it
> in the past, but we changed many things, so README is old -- (in fact, we
> need to document a lot of the code, but much of it is changing as we are
> improving it and we could only do limited things before a conference
> deadline). 
> 
> To run:
> 1. You should put in folder EDB/configs a file with the configuration for
> your machine (take a look at qubit in that folder and replace with your
> paths). Then run  in EDB/: ./configure -c "name of that file"  to create
> your makefile. This only works for ubuntu (maybe some linux distri, but I
> did not test).
> 
> 2. In params.h, set MULTIPRINC to 0; for a start, this will run in single
> principal mode, that is, only the encrypted DBMS without multi principals.

> 
> 3. Hit make in EDB/
> 
> 4. One easy way to play with the system is by running tests/test shell
which
> opens a little shell. Then create tables, etc, e.g., CREATE TABLE hello
(id
> enc integer). Enc tells the DBMS that id is encrypted and you can see the
> onions. Yes, there is a flag to tell cryptdb to encrypt everything by
> default, but this is an easier start.
> 
> For 1) above: Sorry this is not autoconf but we did not have much time
> before the deadline and I wrote most of the code by myself; so another
> person helping is greatly appreciated. :)
> 
> In the past few days, I have been reorganizing the code to make it more
> modular and cleaner for people to read and extend. I have been testing
part
> of it, but I am not sure if something did not break in the meantime.
> Catherine is currently writing comprehensive unit and integration tests.
> This should all be done by the end of the week, so it may be more prudent
> for your to try to play with it then. Then, you can also read the tests,
> which show easily how to play with CryptDB.
> 
> I plan to have more documentation soon...
> 
> Raluca
> 
> 
> 
> On Jul 5, 2011, at 9:01 PM, Craig Harris wrote:
> 
>> Raluca, thank you.
>> 
>> The paper said that CryptDB works with MySQL 5.1.  Is that still the
> target,
>> or should I download 5.5 or 5.6?
>> 
>> -----Original Message-----
>> From: Raluca Ada Popa [mailto:ralucap@MIT.EDU] 
>> Sent: Tuesday, July 05, 2011 6:30 PM
>> To: Craig Harris
>> Cc: cryptdb@csail.mit.edu; Nickolai Zeldovich
>> Subject: Re: [CryptDB] CryptDB and SQL
>> 
>> Craig,
>> 
>> Feel free to ask me questions about the source code. Catherine and I are
>> actively cleaning/organizing/commenting/making the code more complete, in
>> addition to trying to optimize some features and re-evaluating. So the
>> source code will change from a day to another.
>> 
>> We have not tested the Postgres version for a while and made quite some
>> changes, so I recommend running on MySQL for now.
>> 
>> Raluca
>> 
>> On Jul 5, 2011, at 6:05 PM, Nickolai Zeldovich wrote:
>> 
>>> Mostly for Craig:  Our code is currently in a subversion repo stored
>>> in AFS, which is difficult to access without MIT credentials.  I've
>>> cloned that subversion repository into a separate "svn" branch of our
>>> git repository, which should be much easier to access.  You can check
>>> it out via the (read-only) git protocol using:
>>> 
>>>  git clone git://g.csail.mit.edu/cryptdb
>>>  cd cryptdb
>>>  git checkout svn
>>> 
>>> This source tree is a mix of Postgres source code and CryptDB code
>>> (including the MySQL proxy support).  We're hoping to build a cleaner
>>> version of this, but as you can see from the mostly-empty "master" git
>>> branch, we're not very far along yet.
>>> 
>>> Nickolai.
>>> 
>>> On Tue, Jul 5, 2011 at 9:43 AM, Hari Balakrishnan <hari@csail.mit.edu>
>> wrote:
>>>> Thanks, Craig!  These comments are very useful and I've cc'd Raluca Ada
>> Popa, the lead PhD student on the CryptDB project.
>>>> 
>>>> It may be best for us to have these discussions on
cryptdb@csail.mit.edu
>> -- currently this list has the 4 people authored on the paper; Craig, I
> will
>> add you today (I don't know how long it takes to take effect).
>>>> 
>>>> Hari
>>>> 
>>>> On Jul 5, 2011, at 9:05 AM, Craig Harris wrote:
>>>> 
>>>>> 
>>>>> First, just to repeat, your ideas for simple restrictions, join quals,
>>>>> ordering and aggregating over encrypted data are really great.  If the
>>>>> throughput and latency degradation is as small as you say, and if the
>> SQL
>>>>> coverage is acceptable, you could be catalyzing a major change in the
>> DBMS
>>>>> community.
>>>>> 
>>>>> 
>>>>> ---  SQL Questions/Concerns ---
>>>>> 
>>>>> 1. Breadth of SQL coverage.  Many SQL applications make extensive use
> of
>> SQL
>>>>> functions.  The following are common:
>>>>> 
>>>>> String Functions:
>>>>>     * catenation, substr, position, length are most common
>>>>>     * trimming, padding, replacing characters or substrings also
>> common
>>>>>     * regular expression matching, replacing, etc. not uncommon
>>>>> 
>>>>> Math Functions:
>>>>>     * floor, ceiling, round, truncate are most common
>>>>>     * multiplication not uncommon
>>>>> 
>>>>> Date Functions:
>>>>>     * subtracting dates, adding intervals, extracting date components
>>>>>     * rounding dates, truncating etc.
>>>>> 
>>>>> I'm hoping that there are efficient homomorphic encryptions that allow
>> some
>>>>> of these.  If not, there may be some challenges with how DBMSs
> implement
>> SQL
>>>>> (see #5 below).  Whether yes or no, it's probably worth noting in the
>> paper,
>>>>> as this is real-world stuff.
>>>>> 
>>>>> ---
>>>>> 
>>>>> 2. OPE vs. ordering over DET.
>>>>> 
>>>>> Many databases use assumptions about the ordering of primitive
>> datatypes.
>>>>> I'm concerned that DBMSs will assume OPE and get 'thrown off' by
>> ordering
>>>>> over DET.
>>>>> 
>>>>> For example, Netezza stores records in fixed-size blocks that are the
>> unit
>>>>> of transfer between disk and memory.  For a given column c1, Netezza
> may
>>>>> store the minimum and maximum values that occur in every block.  Then,
>> given
>>>>> a query with a predicate like "where c1 = <constant>", Netezza can
skip
>> the
>>>>> I/O for blocks where <constant> is less than the minimum c1 value or
>> greater
>>>>> than the maximum c1 value.  But if c1 was DET instead of OPE, the
query
>>>>> might skip blocks that contained matching values - producing incorrect
>>>>> results.  Even if the results were correct, performance would be
>> decidedly
>>>>> non-optimal
>>>>> 
>>>>> Or consider what happens sometimes with star-schema query
optimizations
>>>>> involving joins between big tables and small 'dimension' tables:
>>>>> 
>>>>>     select * from FACT, DIM where FACT.c1=DIM.c2 and
>> <predicate(DIM.c3)>
>>>>> 
>>>>> A DBMS's query optimizer may note that:
>>>>> 
>>>>>     a) when predicate on DIM.c3 is true, DIM.c2 is always > X and < Y.
>>>>>     b) there are no DIM.c2 values between X and Y for which predicate
>> is
>>>>> false.
>>>>> 
>>>>> In that case, the query optimizer may rewrite the join as:
>>>>> 
>>>>>     select * from t1 where t1.c1 between X and Y.
>>>>> 
>>>>> That's MUCH more efficient than doing a join!  But this will produce
>> wrong
>>>>> answers unless t1.c1 is OPE, and this query doesn't seem to require
>> that.
>>>>> 
>>>>> ---
>>>>> 
>>>>> 3. NULLS:  These should probably be addressed in the paper.
>>>>> 
>>>>> As you know:
>>>>> 
>>>>>     * if two values are null, they are neither equal nor not-equal
>>>>>     * nulls are typically represented by a DBMS as bits in a vector
>>>>>     * SQL functions check their arguments for being null
>>>>>     * Tables may have NOT NULL constraints on certain columns.
>>>>> 
>>>>> I think it's simplest to say that nulls are not encrypted.  DBMSs
check
>>>>> values for being NULL as part of most user interactions.  So if the
> DBMS
>> was
>>>>> compromised, the nullness of given values could be determined whether
>> the
>>>>> values were encrypted or not.  Also, it's hard to see how null-ness
>> could be
>>>>> encrypted without changing the DBMS - as DBMSs check for the 'null'
>> keyword
>>>>> and represent null values differently than non-null values.
>>>>> 
>>>>> It's a shame in a way, because particular patterns of nulls can given
>>>>> information away.  In a communications network, for example, CDRs
(call
>> data
>>>>> records) from one switch may have a distinct pattern of nulls.
>>>>> 
>>>>> ---
>>>>> 
>>>>> 4. NOT IN:
>>>>> 
>>>>>     * "x IN (a,b,c)" equivalent to (x=a) OR (x=b) OR (x=c)
>>>>>     * "x NOT in (a,b,c)" equivalent to (x<>a) AND (x<>b) AND (x<>c)
>>>>> 
>>>>> The straightforward way to treat IN/NOT-IN is to demote RND to DET.
>>>>> 
>>>>> But frequently, DBMSs will use a bloom filter for NOT IN expressions.
>> In
>>>>> such cases, DET may not be required, if there exists an encoding
> between
>> DET
>>>>> and RND that produces the same hash values for all encryptions of the
>> same
>>>>> value.
>>>>> 
>>>>> Hopefully, DET is as hashable as clear-text?
>>>>> 
>>>>> ---
>>>>> 
>>>>> 5. Most DBMSs are extended subsets of the SQL standard.
>>>>> 
>>>>> A challenge for the notion of a single proxy that serves multiple
DBMSs
>> is
>>>>> that DBMSs are extended-subsets of SQL.  They ALL have extensions, and
>> most
>>>>> don't support ALL SQL functions or constructs.  Also there are
semantic
>>>>> difference that could have subtle impacts on query translation
>>>>> 
>>>>> For example, Oracle treats 0-length strings as identical to null.  So
> (I
>>>>> believe)
>>>>> 
>>>>>     create table t1( c1 varchar );
>>>>>     insert into t1 values ('abc');
>>>>>     select c1 || '';
>>>>> 
>>>>> would return null in oracle, but 'abc' in other DBMSs.
>>>>> 
>>>>> As another example, DBMSs differ in their interpretation of "char"
> data:
>>>>> 
>>>>>     create table t1( c1 char(5));
>>>>>     insert into t1 values ('abc');
>>>>>     select length(c1) from t1;
>>>>>     select rtrim(c1,'c') from t1;
>>>>>     select c1 || 'xyz' from t1;
>>>>> 
>>>>> would return <5,'abc','abc  xyz'> in Oracle, but <3,'ab','abcxyz'> in
>>>>> postgres.
>>>>> 
>>>>> It's not clear when these differences would impact your work.  But if
>> the
>>>>> length, rtrim or '||' (catenation) functions were not homographically
>>>>> supported, if they were interpreted in the proxy or the application
>> server,
>>>>> then the interpretation would need to differ depending on the type of
>> the
>>>>> DBMS.
>>>>> 
>>>>> ---
>>>>> 
>>>>> 6. IISF (insert-into-select-from) and CTAS (create table as)
>>>>> 
>>>>> Given:
>>>>> 
>>>>>     create table t1( c1 varchar, c2 varchar, c3 int, c4 int );
>>>>>     insert into t1 values ('abc','xyz',1,2);
>>>>>     select * from t1 where c1 < 'def';
>>>>>     select * from t1 where c3=1;
>>>>>     select sum(c4) from t1;
>>>>> 
>>>>> c1 is OPE, c2 is RND, c3 is DET and c4 is HOM.
>>>>> 
>>>>> Now suppose we have:
>>>>> 
>>>>>     create table t2 as select * from t1;
>>>>> 
>>>>>     create table t3 (c1 varchar, c2 varchar, c3 int, c4 int );
>>>>>     insert into t3 select * from t1;
>>>>> 
>>>>> At this point, are the columns of t2 and t3 all RND?
>>>>> 
>>>>> 
>>>>> 
>>>> 
>>>> 
>>> 
>>> _______________________________________________
>>> CryptDB mailing list
>>> CryptDB@lists.csail.mit.edu
>>> https://lists.csail.mit.edu/mailman/listinfo/cryptdb
>> 
>> 
> 
> 


