How to run EncryptDB:

-- get & start Postgres: 
     -- for first time installation and launch, see instructions below 
     -- after first time, simply run ./setup with path to postgres bin and lib as argument (e.g., ./setup /usr/local/pgsql)
    
-- apt-get install libntl-dev

-- Compile: cd src/EDB/; make 
-- Run: ./test  [runs integration tests]
        ./test shell [runs a shell]
         -- there are other tests in test.cc




POSTGRES - FIRST INSTALL AND LAUNCH

Complete installation info is at (http://www.postgresql.org/docs/8.0/interactive/installation.html)

However, I compiled a list of hints to facilitate the process:

# You will need some software packages: bison, flex, readline (in Ubuntu,
# the package is called libreadline5-dev), zlib (Ubuntu package zlib1g-dev),
# openjade, jadetex, docbook, docbook-dsssl

# First build
PGDIR=.../EncryptDB/dist
./configure --prefix=$(PGDIR)
gmake
gmake install

# Setup paths
export LD_LIBRARY_PATH=$(PGDIR)/lib:/usr/local/lib:/home/$USERNAME/sw/lib
export PATH=$(PGDIR)/bin:$PATH
export MANPATH=$(PGDIR)/man:$MANPATH

# First launch
mkdir $(PGDIR)/data
initdb -D $(PGDIR)/data
postgres -D $(PGDIR)/data >errorlog.txt 2>&1 &
createdb test
psql test

# To create user, say raluca
psql -c 'CREATE ROLE raluca WITH SUPERUSER CREATEDB LOGIN CREATEROLE CREATEUSER INHERIT'


Handy Stuff
-----------

To turn off server:
mysqladmin -u root -p[passwd] shutdown

To turn on server while enabling logging:
sudo mysqld_safe -u root --skip-syslog --log-error=myerrorlog.txt --log=mylog.txt --port=5123
- logging should be off for evaluation

To drop tables matching a pattern:

SELECT CONCAT('DROP TABLE IF EXISTS ', GROUP_CONCAT(table_name), ';') FROM information_schema.tables WHERE table_name LIKE "phpbb_%";

DROP TABLE IF EXISTS eclipsephpbb_acl_groups,phpbb_acl_options,phpbb_acl_roles,phpbb_acl_roles_data,phpbb_acl_users,phpbb_attachments,phpbb_banlist,phpbb_bbcodes,phpbb_bookmarks,phpbb_bots,phpbb_config,phpbb_confirm,phpbb_disallow,phpbb_drafts,phpbb_extension_groups,phpbb_extensions,phpbb_forums,phpbb_forums_access,phpbb_forums_track,phpbb_forums_watch,phpbb_groups,phpbb_icons,phpbb_lang,phpbb_log,phpbb_moderator_cache,phpbb_modules,phpbb_poll_options,phpbb_poll_votes,phpbb_posts,phpbb_privmsgs,phpbb_privmsgs_folder,phpbb_privmsgs_rules,phpbb_privmsgs_to,phpbb_profile_fields,phpbb_profile_fields_data,phpbb_profile_fields_lang,phpbb_profile_lang,phpbb_ranks,phpbb_reports,phpbb_reports_reasons,phpbb_search_results,phpbb_search_wordlist,phpbb_search_wordmatch,phpbb_sessions,phpbb_sessions_keys,phpbb_sitelist,phpbb_smilies,phpbb_styles,phpbb_styles_imageset,phpbb_styles_imageset_data,phpbb_styles_template,phpbb_styles_template_data,phpbb_styles_theme,phpbb_topics,phpbb_topics_posted,phpbb_topics_track,phpbb_topics_watch,phpbb_user_group,phpbb_users, phpbb_warnings, phpbb_words, phpbb_zebra;


---

Most of Equation.cpp was taken from http://www.daniweb.com/software-development/cpp/code/216831

Annotations
-----------

We describe here all the schema annotations.


Schema annotation for single and multi principal:

* enc : if a field is followed by enc, CryptDB will encrypt it
    --- e.g., ".., a enc integer, b enc text, c text", will make only a and b to be encrypted and c will be in plain
    --- using the flag ALWAYS_ENCRYPT will automatically make all fields encrypted
    
    
* search: will make this text searchable with ILIKE; 
    -- e.g.: " ..., name search text, ... "
    -- the programmer can optionally specify the tokenizer function in util.cc which will decide how to split the text in words, 
       else a default tokenizer will be used
    
    
* join: this will know what type of join to use
   -- if the programmer knows that colums a, b, c will be join, he should specify: "a join (b, c) ..." where b, c are full names (field and table)
   -- if the programmer prefers the join to adjust, he should use "a adjustjoin ... "
   -- if the programmer does not specify anything, the default is "a join (all fields)"
   -- the join annotation will not peel the onion to the join layer; it will only decide what join algorithm and keys to use
    
Schema annotations for multi-principal only:

-- while we have changed the names of the attestations many times in the paper, we did not do so in the implementation because
they are equivalent
-- for now, the current annotation is (shown with examples)

   ...TODO...





